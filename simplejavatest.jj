options {
  IGNORE_CASE=false;
}

PARSER_BEGIN(simplejava)

public class simplejava {
}


PARSER_END(simplejava)

TOKEN_MGR_DECLS :
{
    public static int numcomments = 0;
}

SKIP :
{
    < "//" > : INLINE_COMMENT
|   < " " >
|   < "\n" >
|   < "\t" >
}

SKIP :
{
< "/*" > {numcomments++;}: IN_MULTI_LINE_COMMENT
}

<IN_MULTI_LINE_COMMENT>
SKIP :
{
    < " " >
|   < "/*"> {numcomments++;}
|   < "*/" > {numcomments--; if(numcomments == 0) SwitchTo(DEFAULT);}
|   < ~[] >
}

<INLINE_COMMENT>
SKIP :
{
    <"\n"> : DEFAULT
|   < ~[] >
}

TOKEN :
{
    <INTEGER_LITERAL: (["0"-"9"])+>
|   < DO: "do">
|   < ELSE: "else">
|   < FALSE: "false">
|   < FOR: "for">
|   < IF: "if">
|   < TRUE: "true">
|   < WHILE: "while">
|   < RETURN: "return">
|   < PLUS_EQUALS: "+=">
|   < NOT_EQUALS: "!=">
|   < EQUALS_EQUALS: "==">
|   < LESS_THAN_EQUAL_TO: "<=">
|   < GREATER_THAN_EQUAL_TO: ">=">
|   < PLUS_PLUS: "++">
|   < MINUS_MINUS: "--">
|   < AND: "&&">
|   < OR: "||">
|   <IDENTIFIER: ["a"-"z", "A"-"Z"](["a"-"z", "A"-"Z","0"-"9", "_"])*>
}

TOKEN :
{
    < EQUALS: "=" >
|   < PLUS: "+" >
|   < MINUS: "-" >
|   < ASTERISK: "*" >
|   < SLASH: "/" >
|   < LEFT_PARENTHESIS: "(">
|   < RIGHT_PARENTHESIS: ")">
|   < LEFT_BRACE: "{">
|   < RIGHT_BRACE: "}">
|   < LEFT_BRACKET: "[">
|   < RIGHT_BRACKET: "]">
|   < PERIOD: ".">
|   < COMMA: ",">
|   < SEMICOLON: ";">
|   < LESS_THAN: "<">
|   < GREATER_THAN: ">">
|   < NOT: "!">
}


void program():
{}
{
    (s())*
    <EOF>
}

void s():
{}
{
    header() (class_decl() | params() (class_decl() | <SEMICOLON> ))
}

//class foo{stuff}
void class_decl():
{}
{
    <LEFT_BRACE> block()
}

void header():
{}
{
    <IDENTIFIER> <IDENTIFIER>
}

//Series of 0 or more arguments
void params():
{}
{
    <LEFT_PARENTHESIS>  arg()
}

void arg():
{}
{
    LOOKAHEAD(2) header() arg()
|   expression() arg()
|   <LEFT_BRACKET> (var())? <RIGHT_BRACKET> arg()
|   <RIGHT_PARENTHESIS>
|   <COMMA> arg()
}


//Defines everything between two braces of a function or class
void block():
{}
{
    (statement())* <RIGHT_BRACE>
}

void statement():
{}
{
    <LEFT_BRACE> block()
|   <DO>
|   LHS()
|   iff()
|   <FOR> <LEFT_PARENTHESIS> forr()
|   while_block()
|   returnn()
}

void returnn():
{}
{
    <RETURN> RHS_prime()
}

void while_block():
{}
{
    <WHILE> bool()
}

void forr():
{}
{
    <RIGHT_PARENTHESIS>
|   for_prime()
}

void for_prime():
{}
{
    <SEMICOLON> for_prime()
|   expression() forr()
|   (<PLUS_PLUS> | <MINUS_MINUS>) forr()
|   (<GREATER_THAN> | <LESS_THAN> | <EQUALS> RHS_prime()) forr()
}

void iff():
{}
{
    <IF> bool()
|   <ELSE>
}

void bool():
{}
{
    <LEFT_PARENTHESIS> bool() (bool())* <RIGHT_PARENTHESIS> {System.out.println("entered bool()");}
|   LOOKAHEAD(2) args()
|   LOOKAHEAD(2) var()
|   bool_prime()

}

void args():
{}
{
    <IDENTIFIER> (<LEFT_BRACKET>(expression())?<RIGHT_BRACKET>)+ {System.out.println("entered args()");}
}

void bool_prime():
{}
{
    LOOKAHEAD(2) ( <AND> | <OR> | <GREATER_THAN> | <LESS_THAN> | <GREATER_THAN_EQUAL_TO> | <LESS_THAN_EQUAL_TO> | <EQUALS_EQUALS> | <NOT_EQUALS> ) var()
|   ( <AND> | <OR> | <GREATER_THAN> | <LESS_THAN> | <GREATER_THAN_EQUAL_TO> | <LESS_THAN_EQUAL_TO> | <EQUALS_EQUALS> | <NOT_EQUALS> ) bool()
}

void LHS():
{}
{
    //this will bite me later just watch
    <SEMICOLON>
|   var() LHS_prime()
}

void LHS_prime():
{}
{
    var() LHS_prime()
|   complex() LHS_prime()
|   RHS()
}

void RHS():
{}
{
    <SEMICOLON>
|   <EQUALS> RHS_prime()
}

void RHS_prime():
{}
{

    LOOKAHEAD(2) (<PLUS> | <MINUS> | <ASTERISK> | <SLASH> | <AND> | <OR>
    | <LESS_THAN_EQUAL_TO>
    | <GREATER_THAN_EQUAL_TO>
    | <LESS_THAN>
    | <GREATER_THAN> | <NOT>) RHS_prime()
|   expression() RHS_prime()
|   <SEMICOLON>
|   complex() RHS_prime()
}

void var():
{}
{
    <NOT> expression()
|   LOOKAHEAD(2) <IDENTIFIER> params()
|   <INTEGER_LITERAL> | <IDENTIFIER> | <TRUE> | <FALSE>
}

void expression():
{}
{
    <LEFT_PARENTHESIS> expression() <RIGHT_PARENTHESIS> (LOOKAHEAD(2) expression_prime())*
|   var() (LOOKAHEAD(2) expression_prime())*
}


void expression_prime():
{}
{
    (<PLUS> | <MINUS> | <ASTERISK> | <SLASH> | <AND> | <OR>
    | <LESS_THAN_EQUAL_TO>
    | <GREATER_THAN_EQUAL_TO>
    | <LESS_THAN>
    | <GREATER_THAN>
    | <EQUALS_EQUALS>) var()
}

void complex():
{}
{
    <PERIOD> var()
|   <LEFT_BRACKET> complex_prime()
|   <RIGHT_BRACKET>
|   <PLUS_PLUS>
|   <MINUS_MINUS>
|   <COMMA>
}

void complex_prime():
{}
{
    expression() complex()
|   <RIGHT_BRACKET>
}
